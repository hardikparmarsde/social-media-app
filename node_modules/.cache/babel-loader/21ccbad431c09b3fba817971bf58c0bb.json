{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst PostSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: []\n  },\n  reducers: {\n    fetchingPosts(state, action) {\n      state.posts = action.payload;\n    },\n    postCreated(state, action) {\n      state.posts.push(action.payload);\n    },\n    postUpdated(state, action) {\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n    },\n    postDeleted(state, action) {\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n    },\n    postLiked(state, action) {\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n    }\n  }\n});\nexport const {\n  fetchingPosts,\n  postAdded,\n  postDeleted,\n  postUpdated\n} = PostSlice.actions;\nexport default PostSlice.reducer;","map":{"version":3,"names":["createSlice","PostSlice","name","initialState","posts","reducers","fetchingPosts","state","action","payload","postCreated","push","postUpdated","map","post","_id","postDeleted","filter","postLiked","postAdded","actions","reducer"],"sources":["D:/projects/social-media-app/client/src/slices/PostSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst PostSlice = createSlice({\r\n    name:\"posts\",\r\n    initialState: {\r\n        posts: []   \r\n    },\r\n    reducers: {\r\n        fetchingPosts(state, action) {\r\n            state.posts = action.payload;\r\n        },\r\n        postCreated(state, action) {\r\n            state.posts.push(action.payload)\r\n        },\r\n        postUpdated(state, action) {\r\n            return {\r\n               ...state, posts: state.posts.map((post) => post._id === action.payload._id ? action.payload : post)\r\n            }          \r\n        },\r\n        postDeleted(state, action) {\r\n            return { ...state, posts: state.posts.filter((post) => post._id  !== action.payload) }\r\n        },\r\n        postLiked(state, action) {\r\n            return {\r\n                ...state, posts: state.posts.map((post) => post._id === action.payload._id ? action.payload : post)\r\n             }          \r\n         }\r\n    }\r\n})\r\n\r\nexport const { fetchingPosts, postAdded, postDeleted, postUpdated } = PostSlice.actions;\r\n\r\nexport default PostSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAC,OAAO;EACZC,YAAY,EAAE;IACVC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACNC,aAAa,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,WAAW,CAACH,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACH,KAAK,CAACO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACpC,CAAC;IACDG,WAAW,CAACL,KAAK,EAAEC,MAAM,EAAE;MACvB,OAAO;QACJ,GAAGD,KAAK;QAAEH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKP,MAAM,CAACC,OAAO,CAACM,GAAG,GAAGP,MAAM,CAACC,OAAO,GAAGK,IAAI;MACrG,CAAC;IACL,CAAC;IACDE,WAAW,CAACT,KAAK,EAAEC,MAAM,EAAE;MACvB,OAAO;QAAE,GAAGD,KAAK;QAAEH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACa,MAAM,CAAEH,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAMP,MAAM,CAACC,OAAO;MAAE,CAAC;IAC1F,CAAC;IACDS,SAAS,CAACX,KAAK,EAAEC,MAAM,EAAE;MACrB,OAAO;QACH,GAAGD,KAAK;QAAEH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKP,MAAM,CAACC,OAAO,CAACM,GAAG,GAAGP,MAAM,CAACC,OAAO,GAAGK,IAAI;MACrG,CAAC;IACL;EACL;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,aAAa;EAAEa,SAAS;EAAEH,WAAW;EAAEJ;AAAY,CAAC,GAAGX,SAAS,CAACmB,OAAO;AAEvF,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module"}