{"ast":null,"code":"var _jsxFileName = \"D:\\\\node\\\\social-media-app\\\\client\\\\src\\\\components\\\\pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Posts from \"./Posts/Posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PaginatedPosts = () => {\n  _s();\n\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(PaginatedPosts, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c = PaginatedPosts;\nexport default PaginatedPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginatedPosts\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","Posts","PaginatedPosts","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","itemsPerPage","console","log","items","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"sources":["D:/node/social-media-app/client/src/components/pagination.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Posts from \"./Posts/Posts\";\r\n\r\nconst PaginatedPosts = () => {\r\n  const [currentItems, setCurrentItems] = useState(null);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Fetch items from another resources.\r\n    const endOffset = itemOffset + itemsPerPage;\r\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n    setCurrentItems(items.slice(itemOffset, endOffset));\r\n    setPageCount(Math.ceil(items.length / itemsPerPage));\r\n  }, [itemOffset, itemsPerPage]);\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    const newOffset = (event.selected * itemsPerPage) % items.length;\r\n    console.log(\r\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n    );\r\n    setItemOffset(newOffset);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Posts posts={currentItems} /> */}\r\n      <ReactPaginate\r\n        breakLabel=\"...\"\r\n        nextLabel=\"next >\"\r\n        onPageChange={handlePageClick}\r\n        pageRangeDisplayed={5}\r\n        pageCount={pageCount}\r\n        previousLabel=\"< previous\"\r\n        renderOnZeroPageCount={null}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PaginatedPosts;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,eAAlB;;;;AAEA,MAAMC,cAAc,GAAG,MAAM;EAAA;;EAC3B,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C,CAF2B,CAG3B;EACA;;EACA,MAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,CAAD,CAA5C;EAEAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,SAAS,GAAGF,UAAU,GAAGG,YAA/B;IACAC,OAAO,CAACC,GAAR,CAAa,sBAAqBL,UAAW,OAAME,SAAU,EAA7D;IACAL,eAAe,CAACS,KAAK,CAACC,KAAN,CAAYP,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;IACAH,YAAY,CAACS,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,MAAN,GAAeP,YAAzB,CAAD,CAAZ;EACD,CANQ,EAMN,CAACH,UAAD,EAAaG,YAAb,CANM,CAAT,CAP2B,CAe3B;;EACA,MAAMQ,eAAe,GAAIC,KAAD,IAAW;IACjC,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBX,YAAlB,GAAkCG,KAAK,CAACI,MAA1D;IACAN,OAAO,CAACC,GAAR,CACG,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;IAGAZ,aAAa,CAACY,SAAD,CAAb;EACD,CAND;;EAQA,oBACE;IAAA,uBAEE,QAAC,aAAD;MACE,UAAU,EAAC,KADb;MAEE,SAAS,EAAC,QAFZ;MAGE,YAAY,EAAEF,eAHhB;MAIE,kBAAkB,EAAE,CAJtB;MAKE,SAAS,EAAEb,SALb;MAME,aAAa,EAAC,YANhB;MAOE,qBAAqB,EAAE;IAPzB;MAAA;MAAA;MAAA;IAAA;EAFF,iBADF;AAcD,CAtCD;;GAAMH,c;;KAAAA,c;AAwCN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}