{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { fetchPosts } from '../../api';\nexport const getPosts = createAsyncThunk(\"api/getPosts\", async () => {\n  const {\n    data\n  } = await fetchPosts();\n  return data;\n});\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState: {\n    posts: []\n  },\n  reducers: {\n    getPostsActions: (state, action) => {\n      switch (action.type) {\n        case 'FETCH_ALL':\n          {\n            state.posts = action.payload;\n          }\n\n        case 'CREATE':\n          return state;\n\n        default:\n          return state;\n      }\n    }\n  },\n  extraReducers: {\n    [getPosts.fulfilled]: (state, action) => {\n      state.posts = action.payload;\n      state.isSuccess = true;\n    },\n    [getPosts.pending]: (state, action) => {\n      state.isPosting = true;\n    },\n    [getPosts.rejected]: (state, action) => {}\n  }\n});\nexport const {\n  getPostsActions\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","useDispatch","fetchPosts","getPosts","data","postsSlice","name","initialState","posts","reducers","getPostsActions","state","action","type","payload","extraReducers","fulfilled","isSuccess","pending","isPosting","rejected","actions","reducer"],"sources":["D:/node/social-media-app/client/src/components/Posts/PostsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchPosts } from '../../api';\r\n\r\nexport const getPosts = createAsyncThunk(\r\n    \"api/getPosts\",\r\n    async () => {\r\n        const { data } = await fetchPosts();\r\n        return data;\r\n    }\r\n);\r\n  \r\n\r\nexport const postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState: {\r\n    posts: [],\r\n  },\r\n  reducers: {\r\n     getPostsActions: (state, action) => {\r\n        switch(action.type) {\r\n            case 'FETCH_ALL': {\r\n                state.posts = action.payload;\r\n            }\r\n            case 'CREATE':\r\n                return state;\r\n            default:\r\n                return state;    \r\n            }\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [getPosts.fulfilled]: (state, action) => {\r\n        state.posts = action.payload;\r\n        state.isSuccess = true;\r\n    },\r\n    [getPosts.pending]: (state, action) => {\r\n        state.isPosting = true;\r\n    },\r\n    [getPosts.rejected]: (state, action) => {\r\n    }\r\n  }\r\n})\r\n\r\nexport const { getPostsActions } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,OAAO,MAAMC,QAAQ,GAAGH,gBAAgB,CACpC,cADoC,EAEpC,YAAY;EACR,MAAM;IAAEI;EAAF,IAAW,MAAMF,UAAU,EAAjC;EACA,OAAOE,IAAP;AACH,CALmC,CAAjC;AASP,OAAO,MAAMC,UAAU,GAAGN,WAAW,CAAC;EACpCO,IAAI,EAAE,OAD8B;EAEpCC,YAAY,EAAE;IACZC,KAAK,EAAE;EADK,CAFsB;EAKpCC,QAAQ,EAAE;IACPC,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACjC,QAAOA,MAAM,CAACC,IAAd;QACI,KAAK,WAAL;UAAkB;YACdF,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACE,OAArB;UACH;;QACD,KAAK,QAAL;UACI,OAAOH,KAAP;;QACJ;UACI,OAAOA,KAAP;MAPR;IASH;EAXO,CAL0B;EAkBpCI,aAAa,EAAE;IACb,CAACZ,QAAQ,CAACa,SAAV,GAAsB,CAACL,KAAD,EAAQC,MAAR,KAAmB;MACrCD,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACE,OAArB;MACAH,KAAK,CAACM,SAAN,GAAkB,IAAlB;IACH,CAJY;IAKb,CAACd,QAAQ,CAACe,OAAV,GAAoB,CAACP,KAAD,EAAQC,MAAR,KAAmB;MACnCD,KAAK,CAACQ,SAAN,GAAkB,IAAlB;IACH,CAPY;IAQb,CAAChB,QAAQ,CAACiB,QAAV,GAAqB,CAACT,KAAD,EAAQC,MAAR,KAAmB,CACvC;EATY;AAlBqB,CAAD,CAA9B;AA+BP,OAAO,MAAM;EAAEF;AAAF,IAAsBL,UAAU,CAACgB,OAAvC;AAEP,eAAehB,UAAU,CAACiB,OAA1B"},"metadata":{},"sourceType":"module"}